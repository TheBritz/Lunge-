<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TrainingTargetPlatform_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Door
m_door = noone;

m_active = false;
m_targetList = ds_list_create();
m_targetStartY = y + global.TileSize * 2.5;
m_targetMoveSpeed = 2;

//Find reference point
m_referenceX = x - sprite_xoffset + sprite_width/2;
var holdHeight = PlayerBase_GetSpearHoldHeightAboveGround_scr(Player1_obj);
m_referenceY = bbox_bottom - holdHeight;

var thrustDist = PlayerBase_GetSpearThrustDistance_scr(Player1_obj);
thrustDist = thrustDist + (Player1_obj.m_spear.sprite_width - Player1_obj.m_spear.sprite_xoffset);
var thrustReduction = -2;

var angleInc = 45;
var angle, activePosX, activePosY, target;
for(var i = 0; i * angleInc &lt;= 180; i++;)
{
  angle = i * angleInc;
  activePosX = m_referenceX + lengthdir_x(thrustDist + thrustReduction, angle);
  activePosY = m_referenceY + lengthdir_y(thrustDist + thrustReduction, angle);
  target = instance_create(activePosX, m_targetStartY, EnemyTestTarget_obj);
  target.m_activePositionX = activePosX;
  target.m_activePositionY = activePosY;   
  ds_list_add(m_targetList, target);
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if all targets have been hit
var allHit = true;
var target;
for(var i = 0; i &lt; ds_list_size(m_targetList); i++)
{
  target = m_targetList[|i];
  if(target.sprite_index != EnemyTestTargetHit_spr)
  {
    allHit = false;
    break;
  }     
}

if(allHit)
{
  if(instance_exists(m_door))
  {
    with(m_door)
    {
      instance_destroy();
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_active = place_meeting(x, y, PlayerBase_obj);

var destinationX;
var destinationY;

for(var i = 0; i &lt; ds_list_size(m_targetList) i++)
{
  var target = m_targetList[|i];
  
  if(m_active)
  {
    destinationX = target.m_activePositionX;
    destinationY = target.m_activePositionY;
  }
  else
  {
    destinationX = target.x;
    destinationY = m_targetStartY;
  }
    
  with(target)
  {
    if(distance_to_point(destinationX, destinationY) &lt;= abs(other.m_targetMoveSpeed))
    {
      x = destinationX;
      y = destinationY;
      speed = 0;
    }
    else
    {
      move_towards_point(destinationX, destinationY, other.m_targetMoveSpeed);
    }
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get door

m_door = instance_nearest(x, y, DoorClosed_obj);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
