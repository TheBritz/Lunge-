<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Enemy_obj</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Base Init
event_inherited();

//The antagonist type is the object type that will be perceived as the enemy
m_aiAntagonistType = Friendly_obj;
m_aiTarget = noone;
m_aiAttackDistance = 30;

//Seed the antagonist scan alarm
m_aiAntagonistScanRate = round(room_speed/4);
alarm[11] = irandom(m_aiAntagonistScanRate) + 1;

//The distance at which an enemy can see an antagonist
m_aiSightMaxDist = 1200;

m_aiSightCone = array(70, -70);

//Whether or not this enemy can be skewered on the player's spear
m_skewerable = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look for a friendly combatant to attack

//Loop through each instance of the Antagonist Type
with(m_aiAntagonistType)
{
  //Check if the friendly is close enough to see
  var dist = distance_to_object(other.id);
  if(dist &lt; other.m_aiSightMaxDist)
  {  
    //Friendly is close enough, now check if the view to the friendly is 
    //unobstructed
    var hit = collision_line(other.x, other.y, x, y, Solid_obj, false, false);
    if(!instance_exists(hit))
    {
      //Friendly in sight
      other.m_aiTarget = id;
      other.m_aiState = EnemyAIStates.PursueAntagonist;
    } 
  }  
}

alarm[11] = m_aiAntagonistScanRate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Machine
switch(m_aiState)
{
  case EnemyAIStates.PursueAntagonist:
    EnemyBase_PursueAntagonist_scr();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
